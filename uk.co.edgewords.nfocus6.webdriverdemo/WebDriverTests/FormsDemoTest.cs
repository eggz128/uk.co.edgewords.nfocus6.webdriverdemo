// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
using OpenQA.Selenium.Edge;
using NUnit.Framework.Constraints;
using uk.co.edgewords.nfocus6.webdriverdemo.Utils;

namespace uk.co.edgewords.nfocus6.webdriverdemo.WebDriverTests
{
    [TestFixture]
    internal class FormsDemoTest : BaseTest
    {
#pragma warning disable NUnit1032 // An IDisposable field/property should be Disposed in a TearDown method
        //        private IWebDriver driver;
        //#pragma warning restore NUnit1032 // An IDisposable field/property should be Disposed in a TearDown method
        //        public IDictionary<string, object> vars { get; private set; }
        //        private IJavaScriptExecutor js;


        //        [SetUp] //Runs before every [Test] in class
        //        public void SetUp()
        //        {
        //            driver = new EdgeDriver();
        //            //js = (IJavaScriptExecutor)driver; //Can be used to inject and run JS in browser

        //            //vars = new Dictionary<string, object>(); //SelIDE just gives us this for...reasons?
        //        }
        //        [TearDown] //Always runs after each and every [Test] in class
        //        protected void TearDown() //Good for making sure browser is closed
        //        {
        //            driver.Quit(); //This does dispose of the drievr, but NUnit Analyser must be told that by e.g. pragma(s) above, or in an EditorConfig file
        //                           //with the line
        //                           //# Set up additional disposal methods for a specific diagnostic rule
        //                            //dotnet_diagnostic.NUnit1032.additional_dispose_methods = Quit
        //        }
        
        //[Test, Category("Smoke"), Ignore("An ignored test")]
        [Test, Category("Smoke")]
        public void formsDemo()
        {
            //Assert.Ignore("Also ignored"); //But would run setup and teardown
            // Test name: FormsDemo
            // Step # | name | target | value
            // 1 | open | /webdriver2/ | 
            driver.Navigate().GoToUrl("https://www.edgewordstraining.co.uk/webdriver2/");
            // 2 | setWindowSize | 974x1032 | 
            driver.Manage().Window.Size = new System.Drawing.Size(974, 1032);
            // 3 | click | css=.last span | 
            driver.FindElement(By.CssSelector(".last span")).Click();
            // 4 | click | linkText=Forms | 
            driver.FindElement(By.LinkText("Forms")).Click();
            // 5 | type | id=textInput | steve@example.com
            //driver.FindElement(By.Id("textInput")).SendKeys("Steve");
            // 6 | type | id=password | nXWr2wz-cbN5-uc
            //driver.FindElement(By.Id("password")).SendKeys("nXWr2wz-cbN5-uc");
            // 7 | click | id=textInput | 
            driver.FindElement(By.Id("textInput")).Click();
            // 8 | type | id=textInput | Steve
            driver.FindElement(By.Id("textInput")).SendKeys("Steve");
            // 9 | click | id=theForm | 
            driver.FindElement(By.Id("theForm")).Click();
            // 10 | click | id=textArea | 
            driver.FindElement(By.Id("textArea")).Click();
            // 11 | type | id=textArea | was\nhere\n
            driver.FindElement(By.Id("textArea")).SendKeys("was\nhere\n");
            // 12 | click | id=checkbox | 
            driver.FindElement(By.Id("checkbox")).Click();
            // 13 | click | id=select | 
            driver.FindElement(By.Id("select")).Click();
            // 14 | select | id=select | label=Selection Two
            {
                var dropdown = driver.FindElement(By.Id("select"));
                dropdown.FindElement(By.XPath("//option[. = 'Selection Two']")).Click();
            }
            // 15 | click | id=two | 
            driver.FindElement(By.Id("two")).Click();
            // 16 | click | css=.formTable tr:nth-child(6) | 
            driver.FindElement(By.CssSelector(".formTable tr:nth-child(6)")).Click();
            // 17 | type | id=password | password
            driver.FindElement(By.Id("password")).SendKeys("password");
            // 18 | click | linkText=Submit | 
            driver.FindElement(By.LinkText("Submit")).Click();
            // 19 | click | css=tr:nth-child(2) > td:nth-child(3) | 
            driver.FindElement(By.CssSelector("tr:nth-child(2) > td:nth-child(3)")).Click();
            // 20 | assertText | id=textInputValue | Steve
            Assert.That(driver.FindElement(By.Id("textInputValue")).Text, Is.EqualTo("Steve"));
            // 21 | verifyText | id=textInputValue | Stephen
            //Hand edited as very was just a plain assert that would stop the test on failiure
            try //To verify wrap assert in try/catch
            {
                Assert.That(driver.FindElement(By.Id("textInputValue")).Text, Is.EqualTo("Stephen"));
            }
            catch (Exception)
            {
                //Do nothing
                //This will still fail the NUnit Test
                //NOTE: Although this will report as a fail with NUnit+Specflow in the test runner
                //If you use Specflow LivingDoc to generate a HTML report, this will NOT report a fail
            }

            /*
             * Quick aside : Looking for an element that may/may not be there
             */

            // Approach one: try/catch
            try
            {
                driver.FindElement(By.Id("NOSUCHELEMENT")); //will fail
            }
            catch (NoSuchElementException ex)
            {
                Console.WriteLine("Element was not there but dont crash");
                Console.WriteLine(ex.ToString());
            }
            // Approach two - use FindElement*s* to create a collection of elements matching locator and check there is at least one element found
            IList<IWebElement> collection = driver.FindElements(By.Id("NOSUCHELEMENT")); //Just returns an empty collection - will not trow an exception
            if(collection.Count > 0)
            {
                //we found elements!
                //for loop over them and do something
                foreach (var elm in collection)
                {
                    elm.Click();
                }
                //or access one directly
                collection[1].Click();
            } else
            {
                //0 elements in collection
                Console.WriteLine("Collection was empty - expected element not found");
            }



            // 22 | click | css=li:nth-child(1) span | 
            driver.FindElement(By.CssSelector("li:nth-child(1) span")).Click();
        }
    }
}